{"version":3,"sources":["FilterForm.js","TimelineItem.js","Timeline.js","App.js","serviceWorker.js","index.js"],"names":["tagsConcat","tags","lang","FilterForm","props","updateTopic","updateTimeline","array","require","reduce","Array","from","Set","this","options","map","tag","value","key","sort","a","b","localeCompare","className","fullPage","name","id","onSubmit","tabIndex","type","topic","onChange","placeholder","list","React","Component","TimelineItem","state","detailsVisible","showDetails","bind","setState","classes","side","join","onClick","birth","Timeline","items","item","idx","decoratedTimelineItem","data","App","languages","topicFormFullPage","event","arguments","length","preventDefault","languagesWithTopic","cachedLanguages","filter","language","includes","target","filterForm","timeline","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gxJAGA,SAASA,EAAWC,EAAMC,GAAQ,MAAM,GAAN,mBAAWD,GAAX,YAAoBC,EAAKD,O,IA8C5CE,E,kDA1Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKD,MAAMC,YAC9B,EAAKC,eAAiB,EAAKF,MAAME,eAHhB,E,gEAOjB,IAVWC,EAULN,GAVKM,EAUQC,EAAQ,GAAoBC,OAAOT,EAAY,IAVvCU,MAAMC,KAAK,IAAIC,IAAIL,KAW9CM,KAAKC,QAAUb,EACZc,KAAI,SAAAC,GAAG,OAAI,4BAAQC,MAAOD,EAAKE,IAAKF,OACpCG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,IAAII,cAAcD,EAAEH,U,+BAMxC,OAAO,0BACHK,UAAWV,KAAKT,MAAMoB,SAAW,WAAa,GAC9CC,KAAK,SACLC,GAAG,SACHC,SAAUd,KAAKP,gBAEjB,2BAAOoB,GAAG,SAAV,UAAyB,2BACrBE,SAAS,IACTC,KAAK,OACLZ,MAAOJ,KAAKT,MAAM0B,MAClBC,SAAUlB,KAAKR,YACf2B,YAAY,oBACZC,KAAK,YAGT,8BAAUP,GAAG,UACVb,KAAKC,SAGR,+BACE,2BAAOe,KAAK,SAASZ,MAAM,iB,GArCViB,IAAMC,WCkChBC,G,6DAnCb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IACDiC,MAAQ,CAACC,gBAAgB,GAC9B,EAAKrC,KAAO,wBAAIsB,UAAU,YACxB,EAAKnB,MAAMH,KAAKc,KAAI,SAAAC,GAAG,OAAI,wBAAIE,IAAKF,GAAMA,OAG5C,EAAKuB,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,0DAWjB3B,KAAK4B,UAAS,SAAAJ,GAAK,MAAK,CACtBC,gBAAiBD,EAAMC,qB,+BAKzB,IAAMI,EAAU,CACd,eACA7B,KAAKT,MAAMyB,KACXhB,KAAKT,MAAMuC,KACX9B,KAAKwB,MAAMC,eAAiB,WAAa,IACzCM,KAAK,KACP,OAAO,wBACLrB,UAAWmB,EACXG,QAAShC,KAAK0B,aAEd,0BAAMhB,UAAU,WACbV,KAAKT,MAAMqB,KADd,KACsBZ,KAAKT,MAAM0C,MADjC,IAEGjC,KAAKZ,W,GA9BaiC,IAAMC,YCuBlBY,E,uKAtBH,IAAD,OACP,OAAO,wBAAIxB,UAAU,YAClBV,KAAKT,MAAM4C,MACT7B,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE0B,MAAQzB,EAAEyB,SAC5B/B,KAAI,SAACkC,EAAMC,GAAP,OACH,EAAKC,sBAAsBF,EAAOC,EAAM,EAAI,OAAS,e,4CAKvCE,GAAuB,IAAjBT,EAAgB,uDAAT,QACjC,OAAO,kBAAC,EAAD,CACLzB,IAAKkC,EAAK3B,KACVI,KAAMuB,EAAKvB,KACXJ,KAAM2B,EAAK3B,KACXqB,MAAOM,EAAKN,MACZ7C,KAAMmD,EAAKnD,KACX0C,KAAMA,Q,GAlBWT,IAAMC,WC6DdkB,E,kDA5Db,WAAYjD,GAAQ,IAAD,8BACjB,cAAMA,IACDiC,MAAQ,CAACiB,UAAW,GAAIxB,MAAO,IACpC,EAAKzB,YAAc,EAAKA,YAAYmC,KAAjB,gBACnB,EAAKlC,eAAiB,EAAKA,eAAekC,KAApB,gBACtB,EAAKe,mBAAoB,EALR,E,gEASjB1C,KAAKP,mB,qCAGQkD,GAETC,UAAUC,OAAS,IAErBF,EAAMG,iBAGF9C,KAAK0C,oBACP1C,KAAK0C,mBAAoB,IAI7B1C,KAAK4B,SAAS,CAACa,UAAWzC,KAAK+C,mBAAmB/C,KAAKwB,MAAMP,W,yCAG5CA,GACjB,IAAM+B,EAAkBrD,EAAQ,GAChC,MAAc,KAAVsB,EACK+B,EAEAA,EAAgBC,QACrB,SAAAC,GAAQ,OAAIA,EAAS9D,KAAK+D,SAASlC,Q,kCAK7B0B,GACV3C,KAAK4B,SAAS,CAACX,MAAO0B,EAAMS,OAAOhD,U,+BAInC,IAAMiD,EAAa,kBAAC,EAAD,CACfpC,MAAOjB,KAAKwB,MAAMP,MAClBzB,YAAaQ,KAAKR,YAClBC,eAAgBO,KAAKP,eACrBkB,SAAUX,KAAK0C,oBAGbY,EAAWtD,KAAK0C,kBAAoB,GACxC,kBAAC,EAAD,CAAUP,MAAOnC,KAAKwB,MAAMiB,YAE9B,OAAO,kBAAC,IAAMc,SAAP,KACJF,EACAC,O,GAxDWjC,IAAMC,WCQJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c76628e.chunk.js","sourcesContent":["import React from 'react';\nimport './FilterForm.css';\n\nfunction tagsConcat(tags, lang) { return [...tags, ...lang.tags]; }\nfunction clean(array) { return Array.from(new Set(array)); }\n\nclass FilterForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateTopic = this.props.updateTopic;\n    this.updateTimeline = this.props.updateTimeline;\n  }\n\n  componentDidMount() {\n    const tags = clean(require('./languages.json').reduce(tagsConcat, []));\n    this.options = tags\n      .map(tag => <option value={tag} key={tag} />)\n      .sort((a, b) => a.key.localeCompare(b.key));\n  }\n\n  render() {\n\n    // the whole form:\n    return <form\n        className={this.props.fullPage ? 'fullpage' : ''}\n        name=\"filter\"\n        id=\"filter\"\n        onSubmit={this.updateTimeline}\n      >\n      <label id=\"topic\">Topic: <input\n          tabIndex=\"1\"\n          type=\"text\"\n          value={this.props.topic}\n          onChange={this.updateTopic}\n          placeholder=\"OOP, Lisp, JVM...\"\n          list=\"topics\"\n        />\n      </label>\n      <datalist id=\"topics\">\n        {this.options}\n      </datalist>\n\n      <label>\n        <input type=\"submit\" value=\"Update\" />\n      </label>\n    </form>;\n  }\n}\n\nexport default FilterForm;\n","import React from 'react';\nimport './Timeline.css';\nimport './TimelineItem.css';\n\nclass TimelineItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {detailsVisible: false};\n    this.tags = <ul className=\"tagsList\">{\n      this.props.tags.map(tag => <li key={tag}>{tag}</li>)\n    }</ul>;\n\n    this.showDetails = this.showDetails.bind(this);\n  }\n\n  showDetails() { // TODO\n    this.setState(state => ({\n      detailsVisible: !state.detailsVisible\n    }));\n  }\n\n  render() {\n    const classes = [\n      'TimelineItem',\n      this.props.type,\n      this.props.side,\n      this.state.detailsVisible ? 'detailed' : ''\n    ].join(' ');\n    return <li\n      className={classes}\n      onClick={this.showDetails}\n      >\n      <span className=\"content\">\n        {this.props.name} ({this.props.birth})\n        {this.tags}\n      </span>\n    </li>;\n  }\n}\n\nexport default TimelineItem;\n","import React from 'react';\nimport TimelineItem from './TimelineItem.js';\nimport './Timeline.css';\n\nclass Timeline extends React.Component {\n  render() {\n    return <ul className=\"Timeline\">\n      {this.props.items\n        .sort((a, b) => (a.birth - b.birth))\n        .map((item, idx) =>\n          this.decoratedTimelineItem(item, (idx % 2 ? 'left' : 'right')))\n      }\n    </ul>;\n  }\n\n  decoratedTimelineItem(data, side = 'right') {\n    return <TimelineItem\n      key={data.name}\n      type={data.type}\n      name={data.name}\n      birth={data.birth}\n      tags={data.tags}\n      side={side}\n    />;\n  }\n}\n\nexport default Timeline;\n","import React from 'react';\nimport FilterForm from './FilterForm.js';\nimport Timeline from './Timeline.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {languages: [], topic: ''};\n    this.updateTopic = this.updateTopic.bind(this);\n    this.updateTimeline = this.updateTimeline.bind(this);\n    this.topicFormFullPage = true;\n  }\n\n  componentDidMount() {\n    this.updateTimeline();\n  }\n\n  updateTimeline(event) {\n    // if the timeline is updated due to a browser event...\n    if (arguments.length > 0) {\n      // avoid refreshing the page:\n      event.preventDefault();\n\n      // minimize the topic form after its first use:\n      if (this.topicFormFullPage)\n        this.topicFormFullPage = false;\n    }\n\n    // update the state of the timeline:\n    this.setState({languages: this.languagesWithTopic(this.state.topic)});\n  }\n\n  languagesWithTopic(topic) {\n    const cachedLanguages = require('./languages.json');\n    if (topic === '') {\n      return cachedLanguages;\n    } else {\n      return cachedLanguages.filter(\n        language => language.tags.includes(topic) \n      );\n    }\n  }\n\n  updateTopic(event) {\n    this.setState({topic: event.target.value});\n  }\n\n  render() {\n    const filterForm = <FilterForm\n        topic={this.state.topic}\n        updateTopic={this.updateTopic}\n        updateTimeline={this.updateTimeline}\n        fullPage={this.topicFormFullPage}\n      />;\n\n    const timeline = this.topicFormFullPage ? '' :\n      <Timeline items={this.state.languages} />;\n\n    return <React.Fragment>\n      {filterForm}\n      {timeline}\n    </React.Fragment>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}