{"version":3,"sources":["index.tsx","FilterForm.tsx","TimelineItem.tsx","Timeline.tsx","App.tsx","reportWebVitals.ts"],"names":["array","FilterForm","tags","topic","fullPage","updateTopic","updateTimeline","options","sort","a","b","localeCompare","map","tag","value","className","name","id","onSubmit","tabIndex","type","onChange","placeholder","list","TimelineItem","birth","side","tagsList","to","classes","join","Timeline","decoratedItems","items","data","index","App","languages","useParams","navigate","useNavigate","useState","topicFormFullPage","setTopicFormFullPage","currentTopic","setCurrentTopic","useEffect","window","scroll","top","left","behavior","filterForm","event","target","preventDefault","replace","currentLanguages","filter","language","includes","timeline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","reduce","lang","Array","from","Set","ReactDOM","render","StrictMode","hashType","path","element","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.b5fda09e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport type { LanguageEntry } from './types';\n\nconst tagsConcat = (tags: string[], lang: LanguageEntry) => [...tags, ...lang.tags];\nconst clean = (array: string[]) => Array.from(new Set(array));\n\nconst languages = require('./languages.json');\nconst tags = clean(languages.reduce(tagsConcat, []));\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter { ...({ hashType: 'noslash' } as any) }>\n      <Routes>\n        <Route path='/' element={<App languages={languages} tags={tags} />} />\n        <Route path='/:tag' element={<App languages={languages} tags={tags} />} />\n      </Routes>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals(console.log);\n","import React, { ChangeEventHandler, FormEventHandler } from 'react';\nimport './FilterForm.css';\n\ninterface FilterFormProps {\n  readonly tags: string[];\n  readonly topic: string;\n  readonly fullPage: boolean;\n  readonly updateTopic: ChangeEventHandler<HTMLInputElement>;\n  readonly updateTimeline: FormEventHandler<HTMLFormElement>;\n}\n\nconst FilterForm: React.FC<FilterFormProps> = ({\n  tags,\n  topic,\n  fullPage,\n  updateTopic,\n  updateTimeline\n}) => {\n  const options = tags\n    .sort((a, b) => a.localeCompare(b))\n    .map(tag => <option value={tag} key={tag} />);\n\n  return <form\n      className={fullPage ? 'fullpage' : ''}\n      name='filter'\n      id='filter'\n      onSubmit={updateTimeline}\n    >\n    <label id='topic'>Topic: <input\n        tabIndex={1}\n        type='text'\n        value={topic}\n        onChange={updateTopic}\n        placeholder='OOP, Lisp, JVM...'\n        list='topics'\n      />\n    </label>\n    <datalist id='topics'>\n      {options}\n    </datalist>\n\n    <label id='submit'>\n      <input type='submit' value='Update' />\n    </label>\n  </form>;\n};\n\nexport default FilterForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Timeline.css';\nimport './TimelineItem.css';\n\ninterface TimelineItemProps {\n  readonly name: string;\n  readonly birth: number;\n  readonly tags: string[];\n  readonly side: 'left' | 'right';\n}\n\nconst TimelineItem: React.FC<TimelineItemProps> = ({\n  name,\n  birth,\n  tags,\n  side,\n}) => {\n  const tagsList = <ul className='tagsList'>{\n      tags.map(\n        tag => <li key={tag}><Link to={`../${tag}`}>{tag}</Link></li>\n      )\n    }</ul>;\n\n  const classes = [\n    'TimelineItem',\n    side,\n  ].join(' ');\n\n  return <li className={classes}>\n    <span className='content'>\n      {name} ({birth})\n      {tagsList}\n    </span>\n  </li>;\n}\n\nexport default TimelineItem;\n","import React from 'react';\nimport TimelineItem from './TimelineItem';\nimport './Timeline.css';\nimport type { LanguageEntry } from './types';\n\ninterface TimelineProps {\n  readonly items: LanguageEntry[];\n}\n\nconst Timeline: React.FC<TimelineProps> = ({ items }) => {\n  const decoratedItem = (data: LanguageEntry, index: number = 0) => {\n    const side = index % 2 ? 'left' : 'right';\n    return <TimelineItem\n      key={data.name}\n      name={data.name}\n      birth={data.birth}\n      tags={data.tags}\n      side={side}\n    />;\n  };\n\n  const decoratedItems = items\n    .sort((a, b) => (a.birth - b.birth))\n    .map(decoratedItem);\n\n  return <ul className='Timeline'>{decoratedItems}</ul>;\n};\n\nexport default Timeline;\n","import React, { useState, useEffect, ChangeEventHandler, FormEventHandler } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport FilterForm from './FilterForm';\nimport Timeline from './Timeline';\nimport type { LanguageEntry } from './types';\n\ninterface AppProps {\n  readonly languages: LanguageEntry[];\n  readonly tags: string[];\n}\n\nconst App: React.FC<AppProps> = ({ languages, tags }) => {\n  const { tag } = useParams();\n  const navigate = useNavigate();\n\n  const [topicFormFullPage, setTopicFormFullPage] = useState(!tag);\n  const [currentTopic, setCurrentTopic] = useState(''); // controls FilterForm\n\n  // update state and window upon change in URL query parameters:\n  useEffect(() => {\n    window.scroll({ top: 0, left: 0, behavior: 'smooth' });\n    setCurrentTopic(tag || '');\n  }, [tag]);\n\n  const updateTopic: ChangeEventHandler<HTMLInputElement> = (event) =>\n    setCurrentTopic(event.target?.value ?? '');\n\n  const updateTimeline: FormEventHandler<HTMLFormElement> = (event) => {\n    // avoid refreshing the page:\n    if (event) event.preventDefault();\n\n    // update the browser history with a new URL:\n    navigate(`../${currentTopic}`, { replace: true });\n\n    // minimize the topic form after its first use:\n    if (topicFormFullPage) setTopicFormFullPage(false);\n  };\n\n  const filterForm = <FilterForm\n      tags={tags}\n      topic={currentTopic}\n      updateTopic={updateTopic}\n      updateTimeline={updateTimeline}\n      fullPage={topicFormFullPage}\n    />;\n\n  const currentLanguages = tag ? languages.filter(\n      language => language.tags.includes(tag)\n    ) : languages;\n  const timeline = topicFormFullPage ? '' :\n    <Timeline items={currentLanguages} />;\n\n  return <>\n    {filterForm}\n    {timeline}\n  </>;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"sourceRoot":""}