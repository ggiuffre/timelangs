{"version":3,"sources":["FilterForm.js","TimelineItem.js","Timeline.js","App.js","serviceWorker.js","index.js"],"names":["tagsConcat","tags","lang","FilterForm","array","topic","fullPage","updateTopic","updateTimeline","options","require","reduce","Array","from","Set","map","tag","value","key","sort","a","b","localeCompare","className","name","id","onSubmit","tabIndex","type","onChange","placeholder","list","TimelineItem","props","useState","detailsVisible","setDetailsVisible","classes","side","join","onClick","birth","Timeline","items","item","idx","data","decoratedTimelineItem","App","topicFormFullPage","setTopicFormFullPage","currentTopic","setCurrentTopic","languages","setLanguages","event","target","languagesWithTopic","cachedLanguages","filter","language","includes","arguments","length","preventDefault","filterForm","timeline","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47d2741e.chunk.js","sourcesContent":["import React from 'react';\nimport './FilterForm.css';\n\nconst tagsConcat = (tags, lang) => [...tags, ...lang.tags];\nconst clean = (array) => Array.from(new Set(array));\n\nfunction FilterForm({ topic, fullPage, updateTopic, updateTimeline }) {\n  const tags = clean(require('./languages.json').reduce(tagsConcat, []));\n  const options = tags\n    .map(tag => <option value={tag} key={tag} />)\n    .sort((a, b) => a.key.localeCompare(b.key));\n\n  return <form\n      className={fullPage ? 'fullpage' : ''}\n      name=\"filter\"\n      id=\"filter\"\n      onSubmit={updateTimeline}\n    >\n    <label id=\"topic\">Topic: <input\n        tabIndex=\"1\"\n        type=\"text\"\n        value={topic}\n        onChange={updateTopic}\n        placeholder=\"OOP, Lisp, JVM...\"\n        list=\"topics\"\n      />\n    </label>\n    <datalist id=\"topics\">\n      {options}\n    </datalist>\n\n    <label>\n      <input type=\"submit\" value=\"Update\" />\n    </label>\n  </form>;\n}\n\nexport default FilterForm;\n","import React, { useState } from 'react';\nimport './Timeline.css';\nimport './TimelineItem.css';\n\nfunction TimelineItem(props) {\n  const [detailsVisible, setDetailsVisible] = useState(false);\n\n  const showDetails = () => { // TODO\n    setDetailsVisible(!detailsVisible);\n  };\n\n  const tags = <ul className=\"tagsList\">{\n      props.tags.map(tag => <li key={tag}>{tag}</li>)\n    }</ul>;\n\n  const classes = [\n    'TimelineItem',\n    props.type,\n    props.side,\n    detailsVisible ? 'detailed' : ''\n  ].join(' ');\n\n  return <li\n    className={classes}\n    onClick={showDetails}\n    >\n    <span className=\"content\">\n      {props.name} ({props.birth})\n      {tags}\n    </span>\n  </li>;\n}\n\nexport default TimelineItem;\n","import React from 'react';\nimport TimelineItem from './TimelineItem.js';\nimport './Timeline.css';\n\nfunction Timeline({items}) {\n  const decoratedTimelineItem = (data, side = 'right') => {\n    return <TimelineItem\n      key={data.name}\n      type={data.type}\n      name={data.name}\n      birth={data.birth}\n      tags={data.tags}\n      side={side}\n    />;\n  };\n\n  return <ul className=\"Timeline\">\n    {items\n      .sort((a, b) => (a.birth - b.birth))\n      .map((item, idx) =>\n        decoratedTimelineItem(item, (idx % 2 ? 'left' : 'right')))\n    }\n  </ul>;\n}\n\nexport default Timeline;\n","import React, { useState } from 'react';\nimport FilterForm from './FilterForm.js';\nimport Timeline from './Timeline.js';\n\nfunction App () {\n  const [topicFormFullPage, setTopicFormFullPage] = useState(true);\n  const [currentTopic, setCurrentTopic] = useState('');\n  const [languages, setLanguages] = useState([]);\n\n  const updateTopic = (event) => {\n    setCurrentTopic(event.target.value);\n  };\n\n  const languagesWithTopic = (topic) => {\n    const cachedLanguages = require('./languages.json');\n    if (topic === '') {\n      return cachedLanguages;\n    } else {\n      return cachedLanguages.filter(\n        language => language.tags.includes(topic) \n      );\n    }\n  };\n\n  const updateTimeline = (event) => {\n    // if the timeline is updated due to a browser event...\n    if (arguments.length > 0) {\n      // avoid refreshing the page:\n      event.preventDefault();\n\n      // minimize the topic form after its first use:\n      if (topicFormFullPage)\n        setTopicFormFullPage(false);\n    }\n\n    // update the state of the timeline:\n    setLanguages(languagesWithTopic(currentTopic));\n  };\n\n  const filterForm = <FilterForm\n      topic={currentTopic}\n      updateTopic={updateTopic}\n      updateTimeline={updateTimeline}\n      fullPage={topicFormFullPage}\n    />;\n\n  const timeline = topicFormFullPage ? '' :\n    <Timeline items={languages} />;\n\n  return <React.Fragment>\n    {filterForm}\n    {timeline}\n  </React.Fragment>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}