{"version":3,"sources":["FilterForm.js","TimelineItem.js","Timeline.js","App.js","serviceWorker.js","index.js"],"names":["FilterForm","tags","topic","fullPage","updateTopic","updateTimeline","options","map","tag","value","sort","a","b","key","localeCompare","className","name","id","onSubmit","tabIndex","type","onChange","placeholder","list","TimelineItem","props","to","classes","side","join","birth","Timeline","decoratedItems","items","data","index","tagsConcat","lang","clean","array","Array","from","Set","App","console","log","languages","require","reduce","languagesWithTopic","useCallback","filter","language","includes","useParams","history","useHistory","useState","topicFormFullPage","setTopicFormFullPage","currentTopic","setCurrentTopic","currentLanguages","setCurrentLanguages","useEffect","window","scrollTo","event","target","arguments","length","preventDefault","push","filterForm","timeline","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","hashType","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4eda1952.chunk.js","sourcesContent":["import React from 'react';\nimport './FilterForm.css';\n\nfunction FilterForm({\n  tags,\n  topic,\n  fullPage,\n  updateTopic,\n  updateTimeline\n}) {\n  const options = tags\n    .map(tag => <option value={tag} key={tag} />)\n    .sort((a, b) => a.key.localeCompare(b.key));\n\n  return <form\n      className={fullPage ? 'fullpage' : ''}\n      name='filter'\n      id='filter'\n      onSubmit={updateTimeline}\n    >\n    <label id='topic'>Topic: <input\n        tabIndex='1'\n        type='text'\n        value={topic}\n        onChange={updateTopic}\n        placeholder='OOP, Lisp, JVM...'\n        list='topics'\n      />\n    </label>\n    <datalist id='topics'>\n      {options}\n    </datalist>\n\n    <label>\n      <input type='submit' value='Update' />\n    </label>\n  </form>;\n}\n\nexport default FilterForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Timeline.css';\nimport './TimelineItem.css';\n\nfunction TimelineItem(props) {\n  // const [detailsVisible, setDetailsVisible] = useState(false);\n  // const toggleDetails = () => setDetailsVisible(!detailsVisible);\n\n  const tags = <ul className='tagsList'>{\n      props.tags.map(\n        tag => <li key={tag}><Link to={`/${tag}`}>{tag}</Link></li>\n      )\n    }</ul>;\n\n  const classes = [\n    'TimelineItem',\n    props.type,\n    props.side,\n    'detailed'\n    // detailsVisible ? 'detailed' : ''\n  ].join(' ');\n\n  return <li\n    className={classes}\n    // onClick={toggleDetails}\n    >\n    <span className='content'>\n      {props.name} ({props.birth})\n      {tags}\n    </span>\n  </li>;\n}\n\nexport default TimelineItem;\n","import React from 'react';\nimport TimelineItem from './TimelineItem.js';\nimport './Timeline.css';\n\nfunction Timeline({ items }) {\n  const decoratedItem = (data, index = 0) => {\n    const side = index % 2 ? 'left' : 'right';\n    return <TimelineItem\n      key={data.name}\n      name={data.name}\n      type={data.type}\n      birth={data.birth}\n      tags={data.tags}\n      side={side}\n    />;\n  };\n\n  const decoratedItems = items\n    .sort((a, b) => (a.birth - b.birth))\n    .map(decoratedItem);\n\n  return <ul className='Timeline'>{decoratedItems}</ul>;\n}\n\nexport default Timeline;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport FilterForm from './FilterForm.js';\nimport Timeline from './Timeline.js';\n\nconst tagsConcat = (tags, lang) => [...tags, ...lang.tags];\nconst clean = array => Array.from(new Set(array));\n\nfunction App () {\n  console.log('rendering...');\n  const languages = require('./languages.json'); // TODO\n  const tags = clean(languages.reduce(tagsConcat, []));\n\n  const languagesWithTopic = useCallback(topic => {\n    console.log(`filtering languages to match ${topic}...`);\n    if (topic === '') {\n      return languages;\n    } else {\n      return languages.filter(\n        language => language.tags.includes(topic) \n      );\n    }\n  }, [languages]);\n\n  const { tag } = useParams();\n  const history = useHistory();\n\n  const [topicFormFullPage, setTopicFormFullPage] = useState(!tag);\n  const [currentTopic, setCurrentTopic] = useState('');\n  const [currentLanguages, setCurrentLanguages] = useState([]);\n\n  useEffect(() => {\n    console.log(`tag changed to ${tag}`);\n    setCurrentTopic(tag || '');\n    setCurrentLanguages(languagesWithTopic(tag || ''));\n  }, [tag, languagesWithTopic]);\n\n  useEffect(() => window.scrollTo(0, 0), [currentTopic]);\n\n  const updateTopic = event => setCurrentTopic(event.target.value);\n\n  const updateTimeline = event => {\n    console.log('updateTimeline...');\n    // if the timeline is updated due to a browser event...\n    if (arguments.length > 0) {\n      // avoid refreshing the page:\n      event.preventDefault();\n\n      // update the browser history with a new URL:\n      history.push(`/${currentTopic}`);\n\n      // minimize the topic form after its first use:\n      if (topicFormFullPage)\n        setTopicFormFullPage(false);\n    }\n\n    // update the state of the timeline:\n    setCurrentLanguages(languagesWithTopic(currentTopic));\n  };\n\n  const filterForm = <FilterForm\n      tags={tags}\n      topic={currentTopic}\n      updateTopic={updateTopic}\n      updateTimeline={updateTimeline}\n      fullPage={topicFormFullPage}\n    />;\n\n  const timeline = topicFormFullPage ? '' :\n    <Timeline items={currentLanguages} />;\n\n  return <React.Fragment>\n    {filterForm}\n    {timeline}\n  </React.Fragment>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter hashType='noslash'>\n      <Route path={['/:tag', '/']}>\n        <App />\n      </Route>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}